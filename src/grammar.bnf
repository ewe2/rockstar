program    ::= <newline>* (<statement> (<newline>+ | (<newline>+ <statement>)*)?)?

statement  ::= <put_statement> | <listen_statement> | <say_statement> | <give_back_statement> | <if_statement> |
               <while_statement> | <until_statement> | <function_statement> | <increment_statement> |
               <decrement_statement> | <continue_statement> | <break_statement> | <variable_assignment_statement> |
               <function_call>


put_statement        ::= "put" <expr> "into" <variable>
listen_statement     ::= "listen" ("to" <variable>)?
say_statement        ::= <say_commands> <expr>
give_back_statement  ::= "give" "back" <expr>
break_statement      ::= "break" ("it" "down")?
continue_statement   ::= "continue" | ("take" "it" "to" "the" "top")
increment_statement  ::= "build" <variable> "up" (","? "up")*
decrement_statement  ::= "knock" <variable> "down" (","? "down")*

say_commands         ::= "say" | "shout" | "whisper" | "scream"


if_statement        ::= <if_condition> (<newline> <statement>)+ <newline> (<newline>|<else_statement>)
else_statement      ::= <else_condition> (<newline> <statement>)+ <newline> <newline>
while_statement     ::= <while_condition> (<newline> <statement>)+ <newline> <newline>
until_statement     ::= <until_condition> (<newline> <statement>)+ <newline> <newline>
function_statement  ::= <function_signature> (<newline> <statement>)+ <newline> <newline>

if_condition        ::= "if" <expr>
else_condition      ::= "else"
while_condition     ::= "while" <expr>
until_condition     ::= "until" <expr>
function_signature  ::= <variable> "takes" <variable> (("'n'" | "&" | ("," "and"?) | "and") <variable>)*


variable_assignment_statement       ::= <variable_type_assignment_statement> |
                                        <variable_str_assignment_statement> |
                                        <variable_expr_assignment_statement>
variable_type_assignment_statement  ::= <variable> <assignment_command> (<type_constant> | <variable_poetic_number_literal>)
variable_str_assignment_statement   ::= <variable> "says" <anychar>+
variable_expr_assignment_statement  ::= <variable> "thinks" <expr>

variable_poetic_number_literal      ::= !(<type_literal> | <newline>) <anychar>* ("." <anychar>*)?

assignment_command ::= "is" | "are" | "was" | "were" | "'s"


expr               ::= <boolean_expr>
boolean_expr       ::= <equality_expr> (<boolean_operator> <equality_expr>)*
equality_expr      ::= <inequality_expr> (<equality_operator> <inequality_expr>)*
inequality_expr    ::= <add_expr> (<inequality_operator> <add_expr>)*
add_expr           ::= <multiply_expr> (<add_operator> <multiply_expr>)*
multiply_expr      ::= <not_expr> (<multiply_operator> <not_expr>)*
not_expr           ::= "not" <function_call_expr> | <function_call_expr>
function_call_expr ::= <function_call> | <value_provider>

boolean_operator      ::= "and" | "or" | "nor"
equality_operator     ::= "is" | "aint" | "ain't"

inequality_operator     ::= <inequality_eq_operator> | <inequality_neq_operator>
inequality_eq_operator  ::= "is" "as" (<greater_eq_operator> | <less_eq_operator>) "as"
inequality_neq_operator ::= "is" (<greater_operator> | <less_operator>) "than"

greater_eq_operator ::= "high" | "great" | "big" | "strong"
less_eq_operator    ::= "low" | "little" | "small" | "weak"
greater_operator    ::= "higher" | "greater" | "bigger" | "stronger"
less_operator       ::= "lower" | "less" | "smaller" | "weaker"

add_operator        ::= "plus" | "with" | "minus" | "without"
multiply_operator   ::= "times" | "of" | "over"


function_call      ::= <variable> "taking" <value_provider> (<function_arg_delim> <value_provider>)*
function_arg_delim ::= "'n'" | ("," "and"?) | "&"

value_provider     ::= <type_literal> | <variable>

variable                ::= <common_variable> | <proper_variable> | <pronoun>
common_variable         ::= <common_variable_keyword> <lowercase>+
common_variable_keyword ::= "a" | "an" | "the" | "my" | "your"
proper_variable         ::= (<capital> <full_letter>*)+
pronoun                 ::= "it" | "he" | "she" | "him" | "her" | "they" | "them" |
                            "ze" | "hir" | "zie" | "zir" | "xe" | "xem" | "ve" | "ver"


type_literal       ::= <type_constant> | <type_number> | <type_string>
type_constant      ::= <type_mysterious> | <type_null> | <type_boolean_true> | <type_boolean_false>
type_mysterious    ::= "mysterious"
type_null          ::= "null" | "nothing" | "nowhere" | "nobody" | "gone" | "empty"
type_boolean_true  ::= "true" | "right" | "yes" | "ok"
type_boolean_false ::= "false" | "wrong" | "no" | "lies"
type_number        ::= "-"? (<digit>+ ("." <digit>*)?) | ("." <digit>+)
type_string        ::= "\"" (<anychar> | <newline>)* "\""


full_letter ::= <captial> | <lowercase>
anychar     ::= !<newline>


newline    ::= "\r"? "\n"
